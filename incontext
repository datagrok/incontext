#!/bin/sh

#
# incontext: run a command within an environment modified for the current "context"
#
# Copyright 2017 Michael F. Lamb <http://datagrok.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# Under section 7 of AGPL3 you are granted additional permissions described in
# the LICENSE file included with the source code of this program.
#
# License: AGPLv3+ http://www.gnu.org/licenses/agpl.html
#

argv0="${0##*/}"

usage(){ cat <<- USAGE >&2
	Usage:
	    ${argv0} --init
	    ${argv0} [COMMAND [ARG...]]

	Executes COMMAND with ARGs in an environment modified by a .context file in
	this or an ancestor directory.
	
	.context is expected to be an executable that does the work of modifying
	the environment and executing its arguments.
	
	If no COMMAND is specified, launch a shell with the modified environment
	instead.

	Options:

		--init			Create an example .context script in the current directory.
		
	See the documentation for examples of configuration and use.
			
	USAGE
}

# IMPLEMENTATION NOTES
#
# The majority of the context-manipulation work is done by the user's installed
# .context executable. This script exists mainly to get that set up easily, and
# then to locate it and launch it from anywhere within its context.

# TO DO
#
# -C option for starting context search at different directory
# -C option to --init to create context in different directory
# -n option for searching set of default paths for a context directory

if [ "$1" = "--help" ]; then
	usage
	exit 0
elif [ "$1" = "--init" ]; then
	if [ -e ".context" ]; then
		echo >&2 "$argv0: Error: A .context file already exists in this directory."
		exit 1
	fi
	echo >&2 "$argv0: Creating .context file in current directory."
	cat <<- EOF > .context
		#!/bin/sh
		
		# This script was created by 'incontext --init'. It is executed
		# whenever you run 'incontext COMMAND ARGS'. It sets up various
		# environment variables, then executes its argument.
		#
		# Feel free to modify this script to suit your needs. You may also
		# replace it completely with a script in any other language or any
		# executable, as long as that program arranges to execute its arguments
		# after setting up the environment.
		#
	EOF
	# ROT13 the exception grant to avoid license shenanigans
	tr 'a-zA-Z' 'n-za-mN-ZA-M' <<- EOF >> .context
		# Nygubhtu 'vapbagrkg' vf yvprafrq NTCY3+, vg rkcyvpvgyl tenagf lbh
		# crezvffvba gb cebcntngr guvf svyr haqre nal grezf lbh jvfu.
	EOF
	cat <<- EOF >> .context
	
		context="\${0%/*}"

		# This optional block adds a "-e PARAMETER" argument to "incontext".
		#
		# I use it, for example, to set a target deployment environment.
		#
		# Uncomment the line below to set a default.
		# context_param="development"
		if [ "\$1" = "-e" ]; then
		    context_param="\$2"
		    shift 2
		fi

		# If you run 'incontext' when already within this context, you don't
		# need to do all the setup again.
		if [ "\$CONTEXT" -a "\$CONTEXT" -ef "\$context" -a "\$CONTEXT_PARAM" = "\$context_param" ]; then
		    echo >&2 "\$0: INFO: context\${context_param:+/}\${context_param} already active; running in current environment."
		    exec "\${@:-\$SHELL}"
		fi

		export CONTEXT="\$context"
		export CONTEXT_PARAM="\$context_param"

	EOF

	# Detect virtualenvs, and if found, activate it by default in the generated
	# .context file. If not found, leave a commented-out example of how to
	# activate one.

	if [ "$VIRTUAL_ENV" ]; then
		echo >&2 "$argv0: There is an active virtualenv at $VIRTUAL_ENV. I'll activate it in the .context."
		venv="$VIRTUAL_ENV"
		filter='cat'
	elif [ -x bin/python -a -e lib/python*/site.py ]; then
		echo >&2 "$argv0: This seems to be the root of a virtualenv. I'll activate it in the .context."
		venv="\$CONTEXT"
		filter='cat'
	else
		venv='/path/to/venv'
		filter="sed /^#\|^$/!s/^/#/"
	fi
	cat <<- EOF | $filter >> .context
		# Activate the virtualenv at $venv
		VIRTUAL_ENV="$venv"
		if [ -x "\$VIRTUAL_ENV/bin/python" ]; then
			export VIRTUAL_ENV
			export PATH="\$VIRTUAL_ENV/bin:\$PATH"
			unset PYTHON_HOME
		else
		    echo >&2 "\$0: Warning: can't find the virtualenv that used to exist at \$VIRTUAL_ENV"
		fi
		# or, to use the 'activate' script:
		# source "$venv/bin/activate"

	EOF
	
	# If the context itself is a virtualenv, its bin/ is already added to the
	# path. If not, add it.
	if [ ! -e lib/python*/site.py ]; then
		cat <<- EOF >> .context
			# If you create a bin/ directory in your context, this will prepend it to the \$PATH.
			if [ -d "\$CONTEXT/bin" ]; then
			    export PATH="\${CONTEXT}/bin\${PATH:+:}\${PATH}"
			fi

		EOF
	fi

	# Finally, execute arguments.
	cat <<- EOF >> .context
		#
		# Add your own settings and setup here.
		#

		# Do not remove the following line.
		exec "\${@:-\$SHELL}"
		# Nothing after the 'exec' line above will be executed.
	EOF
	chmod +x .context
	exit 0
fi

context="$(findup .context)"
if [ "$CONTEXT" -a ! "$CONTEXT/.context" -ef "$context" ]; then
	echo >&2 "$argv0: Warning: active context differs directory context."
	echo >&2 "$argv0: Directory context will be applied but non-overridden"
	echo >&2 "$argv0: settings from active context will remain present."
	echo >&2 "$argv0: Active context:    $CONTEXT/.context"
	echo >&2 "$argv0: Directory context: $context"
fi

if [ -x "$context" ]; then
	exec "$context" "${@:-$SHELL}"
elif [ -e "$context" ]; then
	echo >&2 "$argv0: Warning: found $context but it is not marked executable; running with current environment."
else
	echo >&2 "$argv0: Warning: no context was found; running with current environment."
fi

exec "${@:-$SHELL}"
